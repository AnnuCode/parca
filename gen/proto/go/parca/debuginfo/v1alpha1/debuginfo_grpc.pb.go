// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package debuginfov1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DebugInfoServiceClient is the client API for DebugInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebugInfoServiceClient interface {
	// Exists returns true if the given build_id has debug info uploaded for it.
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	// Upload ingests debug info for a given build_id
	Upload(ctx context.Context, opts ...grpc.CallOption) (DebugInfoService_UploadClient, error)
}

type debugInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugInfoServiceClient(cc grpc.ClientConnInterface) DebugInfoServiceClient {
	return &debugInfoServiceClient{cc}
}

func (c *debugInfoServiceClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/parca.debuginfo.v1alpha1.DebugInfoService/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugInfoServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (DebugInfoService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DebugInfoService_ServiceDesc.Streams[0], "/parca.debuginfo.v1alpha1.DebugInfoService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugInfoServiceUploadClient{stream}
	return x, nil
}

type DebugInfoService_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type debugInfoServiceUploadClient struct {
	grpc.ClientStream
}

func (x *debugInfoServiceUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *debugInfoServiceUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DebugInfoServiceServer is the server API for DebugInfoService service.
// All implementations should embed UnimplementedDebugInfoServiceServer
// for forward compatibility
type DebugInfoServiceServer interface {
	// Exists returns true if the given build_id has debug info uploaded for it.
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	// Upload ingests debug info for a given build_id
	Upload(DebugInfoService_UploadServer) error
}

// UnimplementedDebugInfoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDebugInfoServiceServer struct {
}

func (UnimplementedDebugInfoServiceServer) Exists(context.Context, *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedDebugInfoServiceServer) Upload(DebugInfoService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}

// UnsafeDebugInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebugInfoServiceServer will
// result in compilation errors.
type UnsafeDebugInfoServiceServer interface {
	mustEmbedUnimplementedDebugInfoServiceServer()
}

func RegisterDebugInfoServiceServer(s grpc.ServiceRegistrar, srv DebugInfoServiceServer) {
	s.RegisterService(&DebugInfoService_ServiceDesc, srv)
}

func _DebugInfoService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugInfoServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parca.debuginfo.v1alpha1.DebugInfoService/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugInfoServiceServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugInfoService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DebugInfoServiceServer).Upload(&debugInfoServiceUploadServer{stream})
}

type DebugInfoService_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type debugInfoServiceUploadServer struct {
	grpc.ServerStream
}

func (x *debugInfoServiceUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *debugInfoServiceUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DebugInfoService_ServiceDesc is the grpc.ServiceDesc for DebugInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DebugInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parca.debuginfo.v1alpha1.DebugInfoService",
	HandlerType: (*DebugInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exists",
			Handler:    _DebugInfoService_Exists_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _DebugInfoService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "parca/debuginfo/v1alpha1/debuginfo.proto",
}
