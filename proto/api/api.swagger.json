{
  "swagger": "2.0",
  "info": {
    "title": "api/api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "API"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/profiles": {
      "post": {
        "operationId": "API_Write",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiWriteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/profilesProfile"
            }
          },
          {
            "name": "tenant",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "API"
        ]
      }
    },
    "/profiles/labels": {
      "get": {
        "operationId": "API_Labels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLabelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "match",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "API"
        ]
      }
    },
    "/profiles/labels/{name}/values": {
      "get": {
        "operationId": "API_Values",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiValuesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "match",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "API"
        ]
      }
    },
    "/profiles/query": {
      "get": {
        "operationId": "API_Query",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiQueryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SINGLE",
              "DIFF",
              "MERGE"
            ],
            "default": "SINGLE"
          },
          {
            "name": "diff.a.mode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "diff.a.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "diff.a.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "diff.a.start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "diff.a.end",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "diff.b.mode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "diff.b.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "diff.b.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "diff.b.start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "diff.b.end",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "merge.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge.start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "merge.end",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "single.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "single.query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "API"
        ]
      }
    },
    "/profiles/query_range": {
      "get": {
        "operationId": "API_QueryRange",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiQueryRangeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "API"
        ]
      }
    },
    "/profiles/series": {
      "get": {
        "operationId": "API_Series",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSeriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "match",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "API"
        ]
      }
    },
    "/status/config": {
      "get": {
        "operationId": "API_Config",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "API"
        ]
      }
    },
    "/targets": {
      "get": {
        "operationId": "API_Targets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTargetsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ANY",
              "ACTIVE",
              "DROPPED"
            ],
            "default": "ANY"
          }
        ],
        "tags": [
          "API"
        ]
      }
    }
  },
  "definitions": {
    "QueryRequestDiff": {
      "type": "object",
      "properties": {
        "a": {
          "$ref": "#/definitions/QueryRequestProfileSelect"
        },
        "b": {
          "$ref": "#/definitions/QueryRequestProfileSelect"
        }
      }
    },
    "QueryRequestMerge": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "QueryRequestMode": {
      "type": "string",
      "enum": [
        "SINGLE",
        "DIFF",
        "MERGE"
      ],
      "default": "SINGLE"
    },
    "QueryRequestProfileSelect": {
      "type": "object",
      "properties": {
        "mode": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "query": {
          "type": "string"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "QueryRequestSingle": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "query": {
          "type": "string"
        }
      }
    },
    "TargetsRequestState": {
      "type": "string",
      "enum": [
        "ANY",
        "ACTIVE",
        "DROPPED"
      ],
      "default": "ANY"
    },
    "apiConfigResponse": {
      "type": "object"
    },
    "apiLabelsResponse": {
      "type": "object"
    },
    "apiQueryRangeResponse": {
      "type": "object"
    },
    "apiQueryResponse": {
      "type": "object"
    },
    "apiSeriesResponse": {
      "type": "object"
    },
    "apiTargetsResponse": {
      "type": "object"
    },
    "apiValuesResponse": {
      "type": "object"
    },
    "apiWriteResponse": {
      "type": "object"
    },
    "perftoolsprofilesLabel": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "int64"
        },
        "str": {
          "type": "string",
          "format": "int64",
          "title": "At most one of the following must be present"
        },
        "num": {
          "type": "string",
          "format": "int64"
        },
        "numUnit": {
          "type": "string",
          "format": "int64",
          "description": "Should only be present when num is present.\nSpecifies the units of num.\nUse arbitrary string (for example, \"requests\") as a custom count unit.\nIf no unit is specified, consumer may apply heuristic to deduce the unit.\nConsumers may also  interpret units like \"bytes\" and \"kilobytes\" as memory\nunits and units like \"seconds\" and \"nanoseconds\" as time units,\nand apply appropriate unit conversions to these."
        }
      }
    },
    "perftoolsprofilesLocation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "description": "Unique nonzero id for the location.  A profile could use\ninstruction addresses or any integer sequence as ids."
        },
        "mappingId": {
          "type": "string",
          "format": "uint64",
          "description": "The id of the corresponding profile.Mapping for this location.\nIt can be unset if the mapping is unknown or not applicable for\nthis profile type."
        },
        "address": {
          "type": "string",
          "format": "uint64",
          "description": "The instruction address for this location, if available.  It\nshould be within [Mapping.memory_start...Mapping.memory_limit]\nfor the corresponding mapping. A non-leaf address may be in the\nmiddle of a call instruction. It is up to display tools to find\nthe beginning of the instruction if necessary."
        },
        "line": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/profilesLine"
          },
          "description": "Multiple line indicates this location has inlined functions,\nwhere the last entry represents the caller into which the\npreceding entries were inlined.\n\nE.g., if memcpy() is inlined into printf:\n   line[0].function_name == \"memcpy\"\n   line[1].function_name == \"printf\""
        },
        "isFolded": {
          "type": "boolean",
          "description": "Provides an indication that multiple symbols map to this location's\naddress, for example due to identical code folding by the linker. In that\ncase the line information above represents one of the multiple\nsymbols. This field must be recomputed when the symbolization state of the\nprofile changes."
        }
      },
      "description": "Describes function and line table debug information."
    },
    "profilesFunction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "description": "Unique nonzero id for the function."
        },
        "name": {
          "type": "string",
          "format": "int64",
          "description": "Name of the function, in human-readable form if available."
        },
        "systemName": {
          "type": "string",
          "format": "int64",
          "description": "Name of the function, as identified by the system.\nFor instance, it can be a C++ mangled name."
        },
        "filename": {
          "type": "string",
          "format": "int64",
          "description": "Source file containing the function."
        },
        "startLine": {
          "type": "string",
          "format": "int64",
          "description": "Line number in source file."
        }
      }
    },
    "profilesLine": {
      "type": "object",
      "properties": {
        "functionId": {
          "type": "string",
          "format": "uint64",
          "description": "The id of the corresponding profile.Function for this line."
        },
        "line": {
          "type": "string",
          "format": "int64",
          "description": "Line number in source code."
        }
      }
    },
    "profilesMapping": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "description": "Unique nonzero id for the mapping."
        },
        "memoryStart": {
          "type": "string",
          "format": "uint64",
          "description": "Address at which the binary (or DLL) is loaded into memory."
        },
        "memoryLimit": {
          "type": "string",
          "format": "uint64",
          "description": "The limit of the address range occupied by this mapping."
        },
        "fileOffset": {
          "type": "string",
          "format": "uint64",
          "description": "Offset in the binary that corresponds to the first mapped address."
        },
        "filename": {
          "type": "string",
          "format": "int64",
          "description": "The object this entry is loaded from.  This can be a filename on\ndisk for the main binary and shared libraries, or virtual\nabstractions like \"[vdso]\"."
        },
        "buildId": {
          "type": "string",
          "format": "int64",
          "description": "A string that uniquely identifies a particular program version\nwith high probability. E.g., for binaries generated by GNU tools,\nit could be the contents of the .note.gnu.build-id field."
        },
        "hasFunctions": {
          "type": "boolean",
          "description": "The following fields indicate the resolution of symbolic info."
        },
        "hasFilenames": {
          "type": "boolean"
        },
        "hasLineNumbers": {
          "type": "boolean"
        },
        "hasInlineFrames": {
          "type": "boolean"
        }
      }
    },
    "profilesProfile": {
      "type": "object",
      "properties": {
        "sampleType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/profilesValueType"
          },
          "description": "A description of the samples associated with each Sample.value.\nFor a cpu profile this might be:\n  [[\"cpu\",\"nanoseconds\"]] or [[\"wall\",\"seconds\"]] or [[\"syscall\",\"count\"]]\nFor a heap profile, this might be:\n  [[\"allocations\",\"count\"], [\"space\",\"bytes\"]],\nIf one of the values represents the number of events represented\nby the sample, by convention it should be at index 0 and use\nsample_type.unit == \"count\"."
        },
        "sample": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/profilesSample"
          },
          "description": "The set of samples recorded in this profile."
        },
        "mapping": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/profilesMapping"
          },
          "description": "Mapping from address ranges to the image/binary/library mapped\ninto that address range.  mapping[0] will be the main binary."
        },
        "location": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/perftoolsprofilesLocation"
          },
          "title": "Useful program location"
        },
        "function": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/profilesFunction"
          },
          "title": "Functions referenced by locations"
        },
        "stringTable": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A common table for strings referenced by various messages.\nstring_table[0] must always be \"\"."
        },
        "dropFrames": {
          "type": "string",
          "format": "int64",
          "description": "frames with Function.function_name fully matching the following\nregexp will be dropped from the samples, along with their successors."
        },
        "keepFrames": {
          "type": "string",
          "format": "int64",
          "description": "frames with Function.function_name fully matching the following\nregexp will be kept, even if it matches drop_functions."
        },
        "timeNanos": {
          "type": "string",
          "format": "int64",
          "description": "Time of collection (UTC) represented as nanoseconds past the epoch."
        },
        "durationNanos": {
          "type": "string",
          "format": "int64",
          "description": "Duration of the profile, if a duration makes sense."
        },
        "periodType": {
          "$ref": "#/definitions/profilesValueType",
          "title": "The kind of events between sampled ocurrences.\ne.g [ \"cpu\",\"cycles\" ] or [ \"heap\",\"bytes\" ]"
        },
        "period": {
          "type": "string",
          "format": "int64",
          "description": "The number of events between sampled occurrences."
        },
        "comment": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "Freeform text associated to the profile."
        },
        "defaultSampleType": {
          "type": "string",
          "format": "int64",
          "description": "Index into the string table of the type of the preferred sample\nvalue. If unset, clients should default to the last sample value."
        }
      }
    },
    "profilesSample": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "The ids recorded here correspond to a Profile.location.id.\nThe leaf is at location_id[0]."
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "The type and unit of each value is defined by the corresponding\nentry in Profile.sample_type. All samples must have the same\nnumber of values, the same as the length of Profile.sample_type.\nWhen aggregating multiple samples into a single sample, the\nresult has a list of values that is the element-wise sum of the\nlists of the originals."
        },
        "label": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/perftoolsprofilesLabel"
          },
          "title": "label includes additional context for this sample. It can include\nthings like a thread id, allocation size, etc"
        }
      },
      "description": "Each Sample records values encountered in some program\ncontext. The program context is typically a stack trace, perhaps\naugmented with auxiliary information like the thread-id, some\nindicator of a higher level request being handled etc."
    },
    "profilesValueType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "format": "int64"
        },
        "unit": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "ValueType describes the semantics and measurement units of a value."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
