// @generated by protobuf-ts 2.2.2 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "share/share.proto" (package "polarsignals.share", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Share } from "./share";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UploadResponse } from "./share";
import type { UploadRequest } from "./share";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service that exposes APIs for sharing profiles.
 *
 * @generated from protobuf service polarsignals.share.Share
 */
export interface IShareClient {
    /**
     * Uploads the profile and returns the link that can be used to access it.
     *
     * @generated from protobuf rpc: Upload(polarsignals.share.UploadRequest) returns (polarsignals.share.UploadResponse);
     */
    upload(input: UploadRequest, options?: RpcOptions): UnaryCall<UploadRequest, UploadResponse>;
}
/**
 * Service that exposes APIs for sharing profiles.
 *
 * @generated from protobuf service polarsignals.share.Share
 */
export class ShareClient implements IShareClient, ServiceInfo {
    typeName = Share.typeName;
    methods = Share.methods;
    options = Share.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Uploads the profile and returns the link that can be used to access it.
     *
     * @generated from protobuf rpc: Upload(polarsignals.share.UploadRequest) returns (polarsignals.share.UploadResponse);
     */
    upload(input: UploadRequest, options?: RpcOptions): UnaryCall<UploadRequest, UploadResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UploadRequest, UploadResponse>("unary", this._transport, method, opt, input);
    }
}
