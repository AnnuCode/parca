// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scrape

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScrapeClient is the client API for Scrape service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScrapeClient interface {
	Targets(ctx context.Context, in *TargetsRequest, opts ...grpc.CallOption) (*TargetsResponse, error)
}

type scrapeClient struct {
	cc grpc.ClientConnInterface
}

func NewScrapeClient(cc grpc.ClientConnInterface) ScrapeClient {
	return &scrapeClient{cc}
}

func (c *scrapeClient) Targets(ctx context.Context, in *TargetsRequest, opts ...grpc.CallOption) (*TargetsResponse, error) {
	out := new(TargetsResponse)
	err := c.cc.Invoke(ctx, "/parca.scrape.Scrape/Targets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScrapeServer is the server API for Scrape service.
// All implementations should embed UnimplementedScrapeServer
// for forward compatibility
type ScrapeServer interface {
	Targets(context.Context, *TargetsRequest) (*TargetsResponse, error)
}

// UnimplementedScrapeServer should be embedded to have forward compatible implementations.
type UnimplementedScrapeServer struct {
}

func (UnimplementedScrapeServer) Targets(context.Context, *TargetsRequest) (*TargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Targets not implemented")
}

// UnsafeScrapeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScrapeServer will
// result in compilation errors.
type UnsafeScrapeServer interface {
	mustEmbedUnimplementedScrapeServer()
}

func RegisterScrapeServer(s grpc.ServiceRegistrar, srv ScrapeServer) {
	s.RegisterService(&Scrape_ServiceDesc, srv)
}

func _Scrape_Targets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeServer).Targets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parca.scrape.Scrape/Targets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeServer).Targets(ctx, req.(*TargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scrape_ServiceDesc is the grpc.ServiceDesc for Scrape service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scrape_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parca.scrape.Scrape",
	HandlerType: (*ScrapeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Targets",
			Handler:    _Scrape_Targets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scrape/scrape.proto",
}
