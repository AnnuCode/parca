syntax = "proto3";

package parca.query;
option go_package = "github.com/parca-dev/parca/proto/gen/go/query";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/pprof/profile.proto";
import "profilestore/profilestore.proto";

service Query {
    rpc QueryRange(QueryRangeRequest) returns (QueryRangeResponse) {
        option (google.api.http) = {
            get: "/profiles/query_range"
        };
    }

    rpc Query(QueryRequest) returns (QueryResponse) {
        option (google.api.http) = {
            get: "/profiles/query"
        };
    }

    rpc Series(SeriesRequest) returns (SeriesResponse) {
        option (google.api.http) = {
            get: "/profiles/series"
        };
    }

    rpc Labels(LabelsRequest) returns (LabelsResponse) {
        option (google.api.http) = {
            get: "/profiles/labels"
        };
    }

    rpc Values(ValuesRequest) returns (ValuesResponse) {
        option (google.api.http) = {
            get: "/profiles/labels/{label_name}/values"
        };
    }

    rpc Config(ConfigRequest) returns (ConfigResponse) {
        option (google.api.http) = {
            get: "/status/config"
        };
    }

    rpc Targets(TargetsRequest) returns (TargetsResponse) {
        option (google.api.http) = {
            get: "/targets"
        };
    }
}

message QueryRangeRequest{
    string query = 1;

    google.protobuf.Timestamp start = 2;
    google.protobuf.Timestamp end   = 3;
    uint32 limit                    = 4;
}

message QueryRangeResponse{
    repeated MetricsSeries series = 1;
}

message MetricsSeries {
    parca.profilestore.LabelSet labelset = 1;
    repeated MetricsSample samples = 2;
}

message MetricsSample {
    google.protobuf.Timestamp timestamp = 1;
    int64 value = 2;
}

message QueryRequest{
    enum Mode {
        SINGLE = 0;
        DIFF   = 1;
        MERGE  = 2;
    }

    Mode mode = 1;

    message Diff {
        ProfileSelect a = 1;
        ProfileSelect b = 2;
    }

    message ProfileSelect {
        string mode  = 1;
        google.protobuf.Timestamp time = 2;
        string query = 3;

        google.protobuf.Timestamp start = 4;
        google.protobuf.Timestamp end   = 5;
    }

    message Merge {
        string query = 1;

        google.protobuf.Timestamp start = 2;
        google.protobuf.Timestamp end   = 3;
    }

    message Single {
        google.protobuf.Timestamp time  = 1;

        string query = 2;
    }

    oneof Options {
        Diff   diff   = 2;
        Merge  merge  = 3;
        Single single = 4;
    }

    enum ReportType {
        FLAMEGRAPH = 0;
    }

    ReportType report_type = 5;
}

message Flamegraph {
    FlamegraphNode root = 1;
    int64 total = 2;
    string unit = 3;
}

message FlamegraphNode {
    string name = 1;
    string full_name = 2;
    int64 cumulative = 3;
    int64 diff = 4;
    repeated FlamegraphNode children = 5;
}

message QueryResponse{
    oneof Report {
        Flamegraph flamegraph = 5;
    }
}

message SeriesRequest{
    repeated string match           = 1;
    google.protobuf.Timestamp start = 2;
    google.protobuf.Timestamp end   = 3;
}
message SeriesResponse{}

message LabelsRequest{
    repeated string match           = 1;
    google.protobuf.Timestamp start = 2;
    google.protobuf.Timestamp end   = 3;
}
message LabelsResponse{
    repeated string label_names = 1;
}

message ValuesRequest{
    string                    label_name = 1;
    repeated string           match      = 2;
    google.protobuf.Timestamp start      = 3;
    google.protobuf.Timestamp end        = 4;
}
message ValuesResponse{
    repeated string label_values = 1;
}

message ConfigRequest{}
message ConfigResponse{}

message TargetsRequest{
    enum State {
        ANY     = 0;
        ACTIVE  = 1;
        DROPPED = 2;
    }

    State state = 1;
}
message TargetsResponse{}
