// source: profilestore/profilestore.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_api_timestamp_pb = require('../google/api/timestamp_pb.js');
goog.object.extend(proto, google_api_timestamp_pb);
goog.exportSymbol('proto.parca.profilestore.Label', null, global);
goog.exportSymbol('proto.parca.profilestore.LabelSet', null, global);
goog.exportSymbol('proto.parca.profilestore.RawProfileSeries', null, global);
goog.exportSymbol('proto.parca.profilestore.RawSample', null, global);
goog.exportSymbol('proto.parca.profilestore.WriteRawRequest', null, global);
goog.exportSymbol('proto.parca.profilestore.WriteRawResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.profilestore.WriteRawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.profilestore.WriteRawRequest.repeatedFields_, null);
};
goog.inherits(proto.parca.profilestore.WriteRawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.profilestore.WriteRawRequest.displayName = 'proto.parca.profilestore.WriteRawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.profilestore.WriteRawResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.profilestore.WriteRawResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.profilestore.WriteRawResponse.displayName = 'proto.parca.profilestore.WriteRawResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.profilestore.RawProfileSeries = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.profilestore.RawProfileSeries.repeatedFields_, null);
};
goog.inherits(proto.parca.profilestore.RawProfileSeries, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.profilestore.RawProfileSeries.displayName = 'proto.parca.profilestore.RawProfileSeries';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.profilestore.Label = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.profilestore.Label, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.profilestore.Label.displayName = 'proto.parca.profilestore.Label';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.profilestore.LabelSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parca.profilestore.LabelSet.repeatedFields_, null);
};
goog.inherits(proto.parca.profilestore.LabelSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.profilestore.LabelSet.displayName = 'proto.parca.profilestore.LabelSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parca.profilestore.RawSample = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parca.profilestore.RawSample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parca.profilestore.RawSample.displayName = 'proto.parca.profilestore.RawSample';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.profilestore.WriteRawRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.profilestore.WriteRawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.profilestore.WriteRawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.profilestore.WriteRawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.profilestore.WriteRawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tenant: jspb.Message.getFieldWithDefault(msg, 1, ""),
    seriesList: jspb.Message.toObjectList(msg.getSeriesList(),
    proto.parca.profilestore.RawProfileSeries.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.profilestore.WriteRawRequest}
 */
proto.parca.profilestore.WriteRawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.profilestore.WriteRawRequest;
  return proto.parca.profilestore.WriteRawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.profilestore.WriteRawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.profilestore.WriteRawRequest}
 */
proto.parca.profilestore.WriteRawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenant(value);
      break;
    case 2:
      var value = new proto.parca.profilestore.RawProfileSeries;
      reader.readMessage(value,proto.parca.profilestore.RawProfileSeries.deserializeBinaryFromReader);
      msg.addSeries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.profilestore.WriteRawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.profilestore.WriteRawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.profilestore.WriteRawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.profilestore.WriteRawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTenant();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.parca.profilestore.RawProfileSeries.serializeBinaryToWriter
    );
  }
};


/**
 * optional string tenant = 1;
 * @return {string}
 */
proto.parca.profilestore.WriteRawRequest.prototype.getTenant = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.profilestore.WriteRawRequest} returns this
 */
proto.parca.profilestore.WriteRawRequest.prototype.setTenant = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated RawProfileSeries series = 2;
 * @return {!Array<!proto.parca.profilestore.RawProfileSeries>}
 */
proto.parca.profilestore.WriteRawRequest.prototype.getSeriesList = function() {
  return /** @type{!Array<!proto.parca.profilestore.RawProfileSeries>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.parca.profilestore.RawProfileSeries, 2));
};


/**
 * @param {!Array<!proto.parca.profilestore.RawProfileSeries>} value
 * @return {!proto.parca.profilestore.WriteRawRequest} returns this
*/
proto.parca.profilestore.WriteRawRequest.prototype.setSeriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.parca.profilestore.RawProfileSeries=} opt_value
 * @param {number=} opt_index
 * @return {!proto.parca.profilestore.RawProfileSeries}
 */
proto.parca.profilestore.WriteRawRequest.prototype.addSeries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.parca.profilestore.RawProfileSeries, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.profilestore.WriteRawRequest} returns this
 */
proto.parca.profilestore.WriteRawRequest.prototype.clearSeriesList = function() {
  return this.setSeriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.profilestore.WriteRawResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.profilestore.WriteRawResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.profilestore.WriteRawResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.profilestore.WriteRawResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.profilestore.WriteRawResponse}
 */
proto.parca.profilestore.WriteRawResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.profilestore.WriteRawResponse;
  return proto.parca.profilestore.WriteRawResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.profilestore.WriteRawResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.profilestore.WriteRawResponse}
 */
proto.parca.profilestore.WriteRawResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.profilestore.WriteRawResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.profilestore.WriteRawResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.profilestore.WriteRawResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.profilestore.WriteRawResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.profilestore.RawProfileSeries.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.profilestore.RawProfileSeries.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.profilestore.RawProfileSeries.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.profilestore.RawProfileSeries} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.profilestore.RawProfileSeries.toObject = function(includeInstance, msg) {
  var f, obj = {
    labels: (f = msg.getLabels()) && proto.parca.profilestore.LabelSet.toObject(includeInstance, f),
    samplesList: jspb.Message.toObjectList(msg.getSamplesList(),
    proto.parca.profilestore.RawSample.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.profilestore.RawProfileSeries}
 */
proto.parca.profilestore.RawProfileSeries.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.profilestore.RawProfileSeries;
  return proto.parca.profilestore.RawProfileSeries.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.profilestore.RawProfileSeries} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.profilestore.RawProfileSeries}
 */
proto.parca.profilestore.RawProfileSeries.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.parca.profilestore.LabelSet;
      reader.readMessage(value,proto.parca.profilestore.LabelSet.deserializeBinaryFromReader);
      msg.setLabels(value);
      break;
    case 2:
      var value = new proto.parca.profilestore.RawSample;
      reader.readMessage(value,proto.parca.profilestore.RawSample.deserializeBinaryFromReader);
      msg.addSamples(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.profilestore.RawProfileSeries.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.profilestore.RawProfileSeries.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.profilestore.RawProfileSeries} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.profilestore.RawProfileSeries.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabels();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.parca.profilestore.LabelSet.serializeBinaryToWriter
    );
  }
  f = message.getSamplesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.parca.profilestore.RawSample.serializeBinaryToWriter
    );
  }
};


/**
 * optional LabelSet labels = 1;
 * @return {?proto.parca.profilestore.LabelSet}
 */
proto.parca.profilestore.RawProfileSeries.prototype.getLabels = function() {
  return /** @type{?proto.parca.profilestore.LabelSet} */ (
    jspb.Message.getWrapperField(this, proto.parca.profilestore.LabelSet, 1));
};


/**
 * @param {?proto.parca.profilestore.LabelSet|undefined} value
 * @return {!proto.parca.profilestore.RawProfileSeries} returns this
*/
proto.parca.profilestore.RawProfileSeries.prototype.setLabels = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parca.profilestore.RawProfileSeries} returns this
 */
proto.parca.profilestore.RawProfileSeries.prototype.clearLabels = function() {
  return this.setLabels(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parca.profilestore.RawProfileSeries.prototype.hasLabels = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RawSample samples = 2;
 * @return {!Array<!proto.parca.profilestore.RawSample>}
 */
proto.parca.profilestore.RawProfileSeries.prototype.getSamplesList = function() {
  return /** @type{!Array<!proto.parca.profilestore.RawSample>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.parca.profilestore.RawSample, 2));
};


/**
 * @param {!Array<!proto.parca.profilestore.RawSample>} value
 * @return {!proto.parca.profilestore.RawProfileSeries} returns this
*/
proto.parca.profilestore.RawProfileSeries.prototype.setSamplesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.parca.profilestore.RawSample=} opt_value
 * @param {number=} opt_index
 * @return {!proto.parca.profilestore.RawSample}
 */
proto.parca.profilestore.RawProfileSeries.prototype.addSamples = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.parca.profilestore.RawSample, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.profilestore.RawProfileSeries} returns this
 */
proto.parca.profilestore.RawProfileSeries.prototype.clearSamplesList = function() {
  return this.setSamplesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.profilestore.Label.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.profilestore.Label.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.profilestore.Label} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.profilestore.Label.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.profilestore.Label}
 */
proto.parca.profilestore.Label.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.profilestore.Label;
  return proto.parca.profilestore.Label.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.profilestore.Label} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.profilestore.Label}
 */
proto.parca.profilestore.Label.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.profilestore.Label.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.profilestore.Label.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.profilestore.Label} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.profilestore.Label.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.parca.profilestore.Label.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.profilestore.Label} returns this
 */
proto.parca.profilestore.Label.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.parca.profilestore.Label.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.parca.profilestore.Label} returns this
 */
proto.parca.profilestore.Label.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parca.profilestore.LabelSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.profilestore.LabelSet.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.profilestore.LabelSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.profilestore.LabelSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.profilestore.LabelSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    proto.parca.profilestore.Label.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.profilestore.LabelSet}
 */
proto.parca.profilestore.LabelSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.profilestore.LabelSet;
  return proto.parca.profilestore.LabelSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.profilestore.LabelSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.profilestore.LabelSet}
 */
proto.parca.profilestore.LabelSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.parca.profilestore.Label;
      reader.readMessage(value,proto.parca.profilestore.Label.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.profilestore.LabelSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.profilestore.LabelSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.profilestore.LabelSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.profilestore.LabelSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.parca.profilestore.Label.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Label labels = 1;
 * @return {!Array<!proto.parca.profilestore.Label>}
 */
proto.parca.profilestore.LabelSet.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.parca.profilestore.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.parca.profilestore.Label, 1));
};


/**
 * @param {!Array<!proto.parca.profilestore.Label>} value
 * @return {!proto.parca.profilestore.LabelSet} returns this
*/
proto.parca.profilestore.LabelSet.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.parca.profilestore.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.parca.profilestore.Label}
 */
proto.parca.profilestore.LabelSet.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.parca.profilestore.Label, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.parca.profilestore.LabelSet} returns this
 */
proto.parca.profilestore.LabelSet.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parca.profilestore.RawSample.prototype.toObject = function(opt_includeInstance) {
  return proto.parca.profilestore.RawSample.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parca.profilestore.RawSample} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.profilestore.RawSample.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawProfile: msg.getRawProfile_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parca.profilestore.RawSample}
 */
proto.parca.profilestore.RawSample.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parca.profilestore.RawSample;
  return proto.parca.profilestore.RawSample.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parca.profilestore.RawSample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parca.profilestore.RawSample}
 */
proto.parca.profilestore.RawSample.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawProfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parca.profilestore.RawSample.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parca.profilestore.RawSample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parca.profilestore.RawSample} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parca.profilestore.RawSample.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawProfile_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes raw_profile = 1;
 * @return {!(string|Uint8Array)}
 */
proto.parca.profilestore.RawSample.prototype.getRawProfile = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes raw_profile = 1;
 * This is a type-conversion wrapper around `getRawProfile()`
 * @return {string}
 */
proto.parca.profilestore.RawSample.prototype.getRawProfile_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawProfile()));
};


/**
 * optional bytes raw_profile = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawProfile()`
 * @return {!Uint8Array}
 */
proto.parca.profilestore.RawSample.prototype.getRawProfile_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawProfile()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.parca.profilestore.RawSample} returns this
 */
proto.parca.profilestore.RawSample.prototype.setRawProfile = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.parca.profilestore);
