package chunk

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestChunk(t *testing.T) {
	tests := map[string]struct {
		chunk    *Chunk
		sample   Sample
		expected *Chunk
	}{
		"empty": {
			chunk: &Chunk{},
			sample: Sample{
				Timestamp: 0,
				Duration:  1e+10, // 10 seconds in nanoseconds
				Period:    100,
				Stacktraces: []StacktraceSample{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
					Value:        1,
				}},
			},
			expected: &Chunk{
				stacktraces: []Stacktrace{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
					Values:       []int64{1},
				}},
				timestamps: []int64{0},
				durations:  []int64{1e+10},
				periods:    []int64{100},
			},
		},
		"lowest-stacktrace": {
			chunk: &Chunk{
				stacktraces: []Stacktrace{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2},
					Values:       []int64{1},
				}},
				timestamps: []int64{0},
				durations:  []int64{1e+10},
				periods:    []int64{100},
			},
			sample: Sample{
				Timestamp: 1,
				Duration:  1e+10, // 10 seconds in nanoseconds
				Period:    100,
				Stacktraces: []StacktraceSample{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
					Value:        1,
				}},
			},
			expected: &Chunk{
				stacktraces: []Stacktrace{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
					Values:       []int64{0, 1},
				}, {
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2},
					Values:       []int64{1, 0},
				}},
				timestamps: []int64{0, 1},
				durations:  []int64{1e+10, 1e+10},
				periods:    []int64{100, 100},
			},
		},
		"middle-stacktrace": {
			chunk: &Chunk{
				stacktraces: []Stacktrace{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
					Values:       []int64{1},
				}, {
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3},
					Values:       []int64{1},
				}},
				timestamps: []int64{0},
				durations:  []int64{1e+10},
				periods:    []int64{100},
			},
			sample: Sample{
				Timestamp: 1,
				Duration:  1e+10, // 10 seconds in nanoseconds
				Period:    100,
				Stacktraces: []StacktraceSample{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2},
					Value:        1,
				}},
			},
			expected: &Chunk{
				stacktraces: []Stacktrace{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
					Values:       []int64{1, 0},
				}, {
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2},
					Values:       []int64{0, 1},
				}, {
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3},
					Values:       []int64{1, 0},
				}},
				timestamps: []int64{0, 1},
				durations:  []int64{1e+10, 1e+10},
				periods:    []int64{100, 100},
			},
		},
		"highest-stacktrace": {
			chunk: &Chunk{
				stacktraces: []Stacktrace{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
					Values:       []int64{1},
				}},
				timestamps: []int64{0},
				durations:  []int64{1e+10},
				periods:    []int64{100},
			},
			sample: Sample{
				Timestamp: 1,
				Duration:  1e+10, // 10 seconds in nanoseconds
				Period:    100,
				Stacktraces: []StacktraceSample{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2},
					Value:        1,
				}},
			},
			expected: &Chunk{
				stacktraces: []Stacktrace{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
					Values:       []int64{1, 0},
				}, {
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2},
					Values:       []int64{0, 1},
				}},
				timestamps: []int64{0, 1},
				durations:  []int64{1e+10, 1e+10},
				periods:    []int64{100, 100},
			},
		},
		"mixed-append": {
			chunk: &Chunk{
				stacktraces: []Stacktrace{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
					Values:       []int64{1},
				}, {
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3},
					Values:       []int64{1},
				}, {
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4},
					Values:       []int64{1},
				}},
				timestamps: []int64{0},
				durations:  []int64{1e+10},
				periods:    []int64{100},
			},
			sample: Sample{
				Timestamp: 1,
				Duration:  1e+10, // 10 seconds in nanoseconds
				Period:    100,
				Stacktraces: []StacktraceSample{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2},
					Value:        1,
				}, {
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3},
					Value:        1,
				}},
			},
			expected: &Chunk{
				stacktraces: []Stacktrace{{
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
					Values:       []int64{1, 0},
				}, {
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2},
					Values:       []int64{0, 1},
				}, {
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3},
					Values:       []int64{1, 1},
				}, {
					StacktraceID: [16]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4},
					Values:       []int64{1, 0},
				}},
				timestamps: []int64{0, 1},
				durations:  []int64{1e+10, 1e+10},
				periods:    []int64{100, 100},
			},
		},
	}

	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			require.NoError(t, tc.chunk.Append(tc.sample))
			require.Equal(t, tc.expected, tc.chunk)
		})
	}
}
