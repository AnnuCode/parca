// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package profilestore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfileStoreClient is the client API for ProfileStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileStoreClient interface {
	WriteRaw(ctx context.Context, in *WriteRawRequest, opts ...grpc.CallOption) (*WriteRawResponse, error)
}

type profileStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileStoreClient(cc grpc.ClientConnInterface) ProfileStoreClient {
	return &profileStoreClient{cc}
}

func (c *profileStoreClient) WriteRaw(ctx context.Context, in *WriteRawRequest, opts ...grpc.CallOption) (*WriteRawResponse, error) {
	out := new(WriteRawResponse)
	err := c.cc.Invoke(ctx, "/parca.profilestore.ProfileStore/WriteRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileStoreServer is the server API for ProfileStore service.
// All implementations should embed UnimplementedProfileStoreServer
// for forward compatibility
type ProfileStoreServer interface {
	WriteRaw(context.Context, *WriteRawRequest) (*WriteRawResponse, error)
}

// UnimplementedProfileStoreServer should be embedded to have forward compatible implementations.
type UnimplementedProfileStoreServer struct {
}

func (UnimplementedProfileStoreServer) WriteRaw(context.Context, *WriteRawRequest) (*WriteRawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRaw not implemented")
}

// UnsafeProfileStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileStoreServer will
// result in compilation errors.
type UnsafeProfileStoreServer interface {
	mustEmbedUnimplementedProfileStoreServer()
}

func RegisterProfileStoreServer(s grpc.ServiceRegistrar, srv ProfileStoreServer) {
	s.RegisterService(&ProfileStore_ServiceDesc, srv)
}

func _ProfileStore_WriteRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServer).WriteRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parca.profilestore.ProfileStore/WriteRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServer).WriteRaw(ctx, req.(*WriteRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileStore_ServiceDesc is the grpc.ServiceDesc for ProfileStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parca.profilestore.ProfileStore",
	HandlerType: (*ProfileStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteRaw",
			Handler:    _ProfileStore_WriteRaw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profilestore/profilestore.proto",
}
